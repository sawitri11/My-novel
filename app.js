// ===== APPLICATION STATE =====
let appState = {
  currentModule: 'writing',
  characters: [],
  chapters: [],
  timeline: [],
  locations: [],
  research: [],
  storyStructure: {
    beginning: '',
    conflict: '',
    climax: '',
    ending: ''
  },
  currentChapter: {
    title: '',
    content: ''
  },
  isConnected: false
};

// ===== DOM ELEMENTS =====
const sidebar = document.getElementById('sidebar');
const sidebarToggle = document.getElementById('sidebarToggle');
const menuToggle = document.getElementById('menuToggle');
const sidebarOverlay = document.getElementById('sidebarOverlay');
const moduleItems = document.querySelectorAll('.module-item');
const contentPanels = document.querySelectorAll('.content-panel');
const saveStatusInline = document.getElementById('saveStatusInline');
const loadingIndicator = document.getElementById('loadingIndicator');

// ===== APPLICATION INITIALIZATION =====
let isAppInitialized = false;

function preventDuplicateInitialization() {
  if (isAppInitialized) {
    console.log('‚ö†Ô∏è ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ã‡πâ‡∏≥');
    return true;
  }
  return false;
}

document.addEventListener('DOMContentLoaded', function() {
  if (preventDuplicateInitialization()) return;

  initializeApp();
  setupEventListeners();
  loadLocalData();

  isAppInitialized = true;
});

async function initializeApp() {
  if (window.appInitialized) {
    console.log('‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ã‡πâ‡∏≥');
    return;
  }

  console.log('üèÆ ‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡∏´‡∏°‡∏∑‡πà‡∏ô‡∏≠‡∏±‡∏Å‡∏©‡∏£ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
  window.appInitialized = true;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô
  await performSystemHealthCheck();

  // Initialize save status
  showSaveStatus('ready');

  // Initialize Firebase securely first
  const firebaseReady = await initializeFirebase();

  if (firebaseReady) {
    // Check Firebase connection
    checkFirebaseConnection();
  } else {
    console.log('üîå Firebase: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô)');
    appState.isConnected = false;
    const statusIndicator = document.querySelector('.status-indicator');
    statusIndicator.classList.add('offline');
    statusIndicator.classList.remove('online');
    loadLocalData();
  }

  // Initialize modules
  initializeModules();

  // Initialize Undo/Redo System
  if (window.UndoRedoSystem) {
    window.UndoRedoSystem.initialize();
  }

  // Setup auto-save
  setupAutoSave();
}

function setupEventListeners() {
  // ‡πÉ‡∏ä‡πâ AbortController ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event listeners
  try {
    if (window.appEventController) {
      window.appEventController.abort();
    }
    window.appEventController = new AbortController();
    const { signal } = window.appEventController;

    // Sidebar toggle
    sidebarToggle?.addEventListener('click', closeSidebar, { passive: true, signal });
    menuToggle?.addEventListener('click', toggleSidebar, { passive: true, signal });
    sidebarOverlay?.addEventListener('click', closeSidebar, { passive: true, signal });

    // Module navigation - use delegation for better performance
    const sidebar = document.getElementById('sidebar');
    sidebar?.addEventListener('click', (e) => {
      const moduleItem = e.target.closest('.module-item');
      if (moduleItem) {
        const module = moduleItem.dataset.module;
        switchModule(module);
        closeSidebar();
      }
    }, { passive: true, signal });

    // AI analyze button
    const aiAnalyzeBtn = document.getElementById('aiAnalyzeBtn');
    aiAnalyzeBtn?.addEventListener('click', analyzeWithAI, { passive: true, signal });

    // Add button events
    setupAddButtonEvents();

    // Keyboard shortcuts
    document.addEventListener('keydown', handleKeyboardShortcuts, { passive: true, signal });

  } catch (error) {
    console.error('‚ùå Error setting up event listeners:', error);
    // Fallback to basic event listeners without AbortController
    setupBasicEventListeners();
  }
}

function setupBasicEventListeners() {
  // Fallback event listeners without AbortController
  sidebarToggle?.addEventListener('click', closeSidebar);
  menuToggle?.addEventListener('click', toggleSidebar);
  sidebarOverlay?.addEventListener('click', closeSidebar);

  const sidebar = document.getElementById('sidebar');
  sidebar?.addEventListener('click', (e) => {
    const moduleItem = e.target.closest('.module-item');
    if (moduleItem) {
      const module = moduleItem.dataset.module;
      switchModule(module);
      closeSidebar();
    }
  });

  const aiAnalyzeBtn = document.getElementById('aiAnalyzeBtn');
  aiAnalyzeBtn?.addEventListener('click', analyzeWithAI);

  setupAddButtonEvents();
}

function handleKeyboardShortcuts(e) {
  // Toggle sidebar with Escape key
  if (e.key === 'Escape') {
    closeSidebar();
  }

  // Toggle sidebar with Ctrl/Cmd + B
  if ((e.ctrlKey || e.metaKey) && e.key === 'b') {
    e.preventDefault();
    toggleSidebar();
  }
}

// ===== SIDEBAR MANAGEMENT =====
function toggleSidebar() {
  const isOpen = sidebar.classList.contains('open');

  if (isOpen) {
    closeSidebar();
  } else {
    openSidebar();
  }
}

function openSidebar() {
  sidebar.classList.add('open');
  sidebarOverlay.classList.add('visible');
  menuToggle.classList.add('hidden');
  document.body.style.overflow = 'hidden';
}

function closeSidebar() {
  sidebar.classList.remove('open');
  sidebarOverlay.classList.remove('visible');
  menuToggle.classList.remove('hidden');
  document.body.style.overflow = 'auto';
}

// ===== MODULE MANAGEMENT =====
function switchModule(moduleName) {
  // Update active module
  moduleItems.forEach(item => item.classList.remove('active'));
  document.querySelector(`[data-module="${moduleName}"]`).classList.add('active');

  // Show corresponding panel
  contentPanels.forEach(panel => panel.classList.remove('active'));
  document.getElementById(`${moduleName}-panel`).classList.add('active');

  // Update app state
  appState.currentModule = moduleName;

  console.log(`üìñ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•: ${moduleName}`);
}

// ===== SAVE STATUS MANAGEMENT =====
function showSaveStatus(status) {
  const statusElement = document.getElementById('saveStatusText');
  const container = document.querySelector('.save-status-inline');

  if (!statusElement) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö saveStatusText element');
    return;
  }

  if (!container) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö save-status-inline container');
    return;
  }

  // Clear any existing timeouts
  if (window.saveStatusTimeout) {
    clearTimeout(window.saveStatusTimeout);
  }

  console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status}`);

  switch(status) {
    case 'saving':
      statusElement.innerHTML = '<span class="status-dot">üü°</span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
      container.style.background = 'rgba(243, 156, 18, 0.2)';
      container.style.borderColor = 'rgba(243, 156, 18, 0.6)';
      container.style.color = '#f39c12';
      break;

    case 'saved':
      const location = appState.isConnected ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô';
      const statusColor = appState.isConnected ? 'üü¢' : 'üîµ';
      statusElement.innerHTML = `<span class="status-dot">${statusColor}</span>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß (${location})`;

      if (appState.isConnected) {
        container.style.background = 'rgba(39, 174, 96, 0.2)';
        container.style.borderColor = 'rgba(39, 174, 96, 0.6)';
        container.style.color = '#27ae60';
      } else {
        container.style.background = 'rgba(52, 152, 219, 0.2)';
        container.style.borderColor = 'rgba(52, 152, 219, 0.6)';
        container.style.color = '#3498db';
      }

      // Auto reset to ready after 4 seconds
      window.saveStatusTimeout = setTimeout(() => {
        if (statusElement.innerHTML.includes('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß')) {
          showSaveStatus('ready');
        }
      }, 4000);
      break;

    case 'error':
      statusElement.innerHTML = '<span class="status-dot">üî¥</span>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
      container.style.background = 'rgba(231, 76, 60, 0.2)';
      container.style.borderColor = 'rgba(231, 76, 60, 0.6)';
      container.style.color = '#e74c3c';

      // Auto reset to ready after 5 seconds
      window.saveStatusTimeout = setTimeout(() => {
        showSaveStatus('ready');
      }, 5000);
      break;

    case 'ready':
      statusElement.innerHTML = '<span class="status-dot">üü¢</span>‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô';
      container.style.background = 'rgba(102, 126, 234, 0.15)';
      container.style.borderColor = 'rgba(102, 126, 234, 0.4)';
      container.style.color = '#2c3e50';
      break;
  }

  // Add pulse animation for active states
  if (status === 'saving') {
    container.style.animation = 'pulse 1s ease-in-out infinite';
  } else {
    container.style.animation = '';
  }
}

// ===== AUTO-SAVE SETUP =====
function setupAutoSave() {
  let saveTimeout;
  let lastSaveTime = 0;
  let isCurrentlySaving = false;

  const debouncedSave = debounce(async () => {
    if (isCurrentlySaving) {
      console.log('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏¢‡∏π‡πà ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const writingEditor = document.getElementById('writingEditor');
    const currentContent = writingEditor ? writingEditor.value : '';
    const lastSavedContent = localStorage.getItem('lastSavedContent') || '';

    if (currentContent === lastSavedContent) {
      console.log('üìù ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á - ‡∏Ç‡πâ‡∏≤‡∏° auto-save');
      return;
    }

    isCurrentlySaving = true;
    showSaveStatus('saving');

    try {
      // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (writingEditor) {
        appState.currentChapter.content = writingEditor.value;
        localStorage.setItem('lastSavedContent', writingEditor.value);
        console.log(`üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${writingEditor.value.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
      }

      const success = await saveToFirebase();

      if (success) {
        showSaveStatus('saved');
        lastSaveTime = Date.now();
        console.log('‚úÖ Auto-save ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', new Date().toLocaleTimeString());
      } else {
        showSaveStatus('error');
        console.log('‚ùå Auto-save ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
    } catch (error) {
      showSaveStatus('error');
      console.error('‚ùå Auto-save error:', error);
    } finally {
      isCurrentlySaving = false;
    }
  }, 3000); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡∏Å

  // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° elements ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
  function attachAutoSave() {
    const elements = [
      'writingEditor',
      'chapterTitle',
    ];

    elements.forEach(elementId => {
      const element = document.getElementById(elementId);
      if (element) {
        // Event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå with throttle
        const throttledInput = throttle((e) => {
          console.log(`üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô: ${elementId} - ${e.target.value.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
          showSaveStatus('saving');
          debouncedSave();
        }, 500); // Throttle ‡∏ó‡∏∏‡∏Å‡πÜ 500ms

        element.addEventListener('input', throttledInput);

        // Event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á
        element.addEventListener('blur', () => {
          console.log(`üëÜ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á: ${elementId}`);
          if (Date.now() - lastSaveTime > 1000) {
            debouncedSave();
          }
        });

        // Event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ focus
        element.addEventListener('focus', () => {
          console.log(`üëÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á: ${elementId}`);
          if (element.value.trim()) {
            showSaveStatus('ready');
          }
        });

        console.log(`‚úÖ Auto-save ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${elementId}`);
      } else {
        console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö element: ${elementId}`);
      }
    });

    // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° character ‡πÅ‡∏•‡∏∞ module ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    document.addEventListener('characterUpdated', () => {
      console.log('üìù Character updated - triggering save');
      debouncedSave();
    });

    document.addEventListener('chapterUpdated', () => {
      console.log('üìù Chapter updated - triggering save');
      debouncedSave();
    });

    console.log('üíæ Auto-save system ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô auto-save
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', attachAutoSave);
  } else {
    setTimeout(attachAutoSave, 100); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (heartbeat save) - ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
  setInterval(() => {
    if (Date.now() - lastSaveTime > 60000 && !isCurrentlySaving) {
      console.log('üíì Heartbeat auto-save ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
      debouncedSave();
    }
  }, 60000);

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Auto-save
  setTimeout(() => {
    showSaveStatus('ready');
    console.log('üü¢ Auto-save ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    console.log('üíæ Auto-save system ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ elements ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const writingEditor = document.getElementById('writingEditor');
    if (writingEditor) {
      console.log('‚úÖ Writing Editor ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß - Auto-save ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    } else {
      console.log('‚ö†Ô∏è Writing Editor ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î');
    }
  }, 500);
}

// ===== ADD BUTTON EVENTS =====
function setupAddButtonEvents() {
  // Add Chapter
  document.getElementById('addChapterBtn')?.addEventListener('click', () => {
    if (window.ChapterModule) {
      window.ChapterModule.addChapter();
    }
  });

  // Add Character
  document.getElementById('addCharacterBtn')?.addEventListener('click', () => {
    if (window.CharacterModule) {
      window.CharacterModule.addCharacter();
    }
  });

  // Add Timeline Event
  document.getElementById('addTimelineBtn')?.addEventListener('click', () => {
    if (window.TimelineModule) {
      window.TimelineModule.addTimelineEvent();
    }
  });

  // Add Location
  document.getElementById('addLocationBtn')?.addEventListener('click', () => {
    if (window.WorldModule) {
      window.WorldModule.addLocation();
    }
  });

  // Add Research
  document.getElementById('addResearchBtn')?.addEventListener('click', () => {
    if (window.ResearchModule) {
      window.ResearchModule.addResearch();
    }
  });
}

// ===== MODULE INITIALIZATION =====
function initializeModules() {
  console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');

  // Initialize empty character if none exist
  if (appState.characters.length === 0 && window.CharacterModule) {
    window.CharacterModule.addCharacter();
  }
}

// ===== AI ANALYSIS =====
async function analyzeWithAI() {
  try {
    if (loadingIndicator) {
      loadingIndicator.style.display = 'flex';
    }
    console.log('ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini AI...');

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ Gemini
    const analysisData = {
      content: appState.currentChapter.content || '',
      characters: appState.characters || [],
      storyStructure: appState.storyStructure || {}
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!analysisData.content.trim()) {
      if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
      }
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å AI');
      return;
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API
    const apiUrl = 'http://0.0.0.0:5000/api/gemini-analyze';

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(analysisData)
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API');
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    showAIAnalysisModal(result.analysis);

    if (loadingIndicator) {
      loadingIndicator.style.display = 'none';
    }
    console.log('ü§ñ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini AI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI:', error);
    if (loadingIndicator) {
      loadingIndicator.style.display = 'none';
    }
    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
}

function showAIAnalysisModal(analysis) {
  // ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const existingModal = document.querySelector('.ai-analysis-modal');
  if (existingModal) {
    existingModal.remove();
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
  const modal = document.createElement('div');
  modal.className = 'ai-analysis-modal';
  modal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h3><i class="fas fa-brain"></i> ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å Gemini AI</h3>
        <button class="modal-close">&times;</button>
      </div>
      <div class="modal-body">
        <div class="analysis-content">${analysis.replace(/\n/g, '<br>')}</div>
      </div>
      <div class="modal-footer">
        <button class="btn-primary modal-close">‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß</button>
      </div>
    </div>
  `;

  document.body.appendChild(modal);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
  const closeModal = () => {
    if (modal.parentNode) {
      document.body.removeChild(modal);
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î modal
  modal.querySelectorAll('.modal-close').forEach(btn => {
    btn.addEventListener('click', closeModal);
  });

  // ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // ‡∏õ‡∏¥‡∏î modal ‡∏î‡πâ‡∏ß‡∏¢ Escape key
  const handleEscape = (e) => {
    if (e.key === 'Escape') {
      closeModal();
      document.removeEventListener('keydown', handleEscape);
    }
  };
  document.addEventListener('keydown', handleEscape);
}

// ===== SYSTEM HEALTH CHECK =====
async function performSystemHealthCheck() {
  const checks = {
    localStorage: false,
    domElements: false,
    apiServer: false,
    eventListeners: false
  };

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö localStorage
    localStorage.setItem('healthCheck', 'test');
    localStorage.removeItem('healthCheck');
    checks.localStorage = true;
    console.log('‚úÖ localStorage: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  } catch (error) {
    console.error('‚ùå localStorage: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DOM elements ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const requiredElements = ['sidebar', 'saveStatus'];
    const missingElements = requiredElements.filter(id => !document.getElementById(id));

    if (missingElements.length === 0) {
      checks.domElements = true;
      console.log('‚úÖ DOM Elements: ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    } else {
      console.error('‚ùå DOM Elements ‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢:', missingElements);
    }
  } catch (error) {
    console.error('‚ùå DOM Elements: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error);
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Server
    if (window.FirebaseModule) {
      checks.apiServer = await window.FirebaseModule.checkAPIHealth();
    }
    if (checks.apiServer) {
      console.log('‚úÖ API Server: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
    } else {
      console.log('‚ö†Ô∏è API Server: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
    }
  } catch (error) {
    console.error('‚ùå API Server: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error);
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Event Listeners
    checks.eventListeners = typeof window.addEventListener === 'function';
    console.log('‚úÖ Event Listeners: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  } catch (error) {
    console.error('‚ùå Event Listeners: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
  }

  // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏£‡∏ß‡∏°
  const healthScore = Object.values(checks).filter(Boolean).length;
  const totalChecks = Object.keys(checks).length;

  console.log(`üè• ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö: ${healthScore}/${totalChecks} (${Math.round(healthScore/totalChecks*100)}%)`);

  if (healthScore < totalChecks * 0.75) {
    console.warn('‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏ö‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  }

  return checks;
}

// ===== UTILITY FUNCTIONS =====
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function throttle(func, delay) {
  let timeoutId;
  let lastExecTime = 0;
  return function (...args) {
    const currentTime = Date.now();

    if (currentTime - lastExecTime > delay) {
      func.apply(this, args);
      lastExecTime = currentTime;
    } else {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        func.apply(this, args);
        lastExecTime = Date.now();
      }, delay - (currentTime - lastExecTime));
    }
  };
}

// ===== GLOBAL FUNCTIONS =====
async function initializeFirebase() {
  if (window.FirebaseModule) {
    return await window.FirebaseModule.initializeFirebase();
  }
  return false;
}

async function checkFirebaseConnection() {
  if (window.FirebaseModule) {
    return await window.FirebaseModule.checkFirebaseConnection();
  }
  return false;
}

async function saveToFirebase() {
  if (window.FirebaseModule) {
    try {
      const result = await window.FirebaseModule.saveToFirebase(appState);
      if (result) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï connection status
        appState.isConnected = true;
        updateConnectionStatus('online');
        return true;
      }
    } catch (error) {
      console.error('üíæ Save error:', error);
      appState.isConnected = false;
      updateConnectionStatus('offline');
    }
  }

  // Fallback ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô localStorage
  try {
    localStorage.setItem('jadeScrollData', JSON.stringify(appState));
    console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;
  } catch (error) {
    console.error('‚ùå localStorage error:', error);
    return false;
  }
}

function updateConnectionStatus(status) {
  const statusIndicator = document.querySelector('.status-indicator');
  const statusSpan = statusIndicator?.querySelector('span');

  if (statusIndicator && statusSpan) {
    if (status === 'online') {
      statusIndicator.className = 'status-indicator online';
      statusSpan.textContent = '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå';
    } else {
      statusIndicator.className = 'status-indicator offline';
      statusSpan.textContent = '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
    }
  }
}

function loadLocalData() {
  try {
    const savedData = localStorage.getItem('jadeScrollData');
    if (savedData) {
      const data = JSON.parse(savedData);
      appState = { ...appState, ...data };
      console.log('üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // Render all modules if they exist
      if (window.CharacterModule && appState.characters) {
        window.CharacterModule.renderCharacters(appState.characters);
      }
      
      if (window.ChapterPreview && appState.chapters) {
        // Chapter Preview ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á
        console.log('üìã ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó:', appState.chapters.length, '‡∏ö‡∏ó');
      }

      if (window.WorldModule && appState.locations) {
        window.WorldModule.renderLocations(appState.locations);
      }

      if (window.ResearchModule && appState.research) {
        window.ResearchModule.renderResearch(appState.research);
      }

      if (window.StructureModule && appState.storyStructure) {
        window.StructureModule.renderStoryStructure(appState.storyStructure);
      }

      // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const writingEditor = document.getElementById('writingEditor');
      if (writingEditor && appState.currentChapter && appState.currentChapter.content) {
        writingEditor.value = appState.currentChapter.content;
        console.log('üìù ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } else {
      console.log('üìÇ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà');
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô ChapterPreview
      if (window.ChapterPreview) {
        window.ChapterPreview.loadData();
      }
    }
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if (window.ChapterPreview) {
      window.ChapterPreview.loadData();
    }
  }
}

// ===== CHAPTER CARDS BORDER CONTROL=====
function toggleWritingAreaBorder(isCardsOpen) {
  const writingArea = document.querySelector('.writing-area');
  if (writingArea) {
    if (isCardsOpen) {
      writingArea.classList.add('cards-open');
    } else {
      writingArea.classList.remove('cards-open');
    }
  }
}

// ===== Chapter Cards functionality =====
function initializeChapterCards() {
  const trigger = document.getElementById('chapterCardsTrigger');
  const overlay = document.getElementById('chapterCardsOverlay');
  const cardsContainer = document.getElementById('chapterInfoCards');

  if (!trigger || !overlay || !cardsContainer) return;

  trigger.addEventListener('click', function() {
    const isActive = overlay.classList.contains('active');

    if (isActive) {
      overlay.classList.remove('active');
      trigger.classList.remove('active');
      toggleWritingAreaBorder(false); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
    } else {
      generateChapterCards();
      overlay.classList.add('active');
      trigger.classList.add('active');
      toggleWritingAreaBorder(true); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
      setTimeout(() => {
        const cards = cardsContainer.querySelectorAll('.chapter-info-card');
        cards.forEach((card, index) => {
          card.style.opacity = '0';
          card.style.transform = 'translateY(20px) scale(0.9)';
          setTimeout(() => {
            card.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0) scale(1)';
          }, index * 100);
        });
      }, 100);
    }
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô - ‡∏•‡∏î lag ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° performance
  let scrollTimeout;
  const throttledScroll = throttle(() => {
    cardsContainer.classList.add('scrolling');

    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(() => {
      cardsContainer.classList.remove('scrolling');
    }, 100);
  }, 16); // 60fps

  cardsContainer.addEventListener('scroll', throttledScroll, { passive: true });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏≥‡∏ó‡∏≤‡∏á (scroll buttons)
  addScrollButtons(cardsContainer);

  // Close when clicking outside
  overlay.addEventListener('click', function(e) {
    if (e.target === overlay && overlay.classList.contains('active')) {
      overlay.classList.remove('active');
      trigger.classList.remove('active');
      toggleWritingAreaBorder(false); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
    }
  });
}

function generateChapterCards() {
  const cardsContainer = document.getElementById('chapterInfoCards');
  if (!cardsContainer) return;

  // Clear existing cards
  cardsContainer.innerHTML = '';

  // Enhanced chapter data with editable metadata
  const chapterCardsData = [
    {
      id: 'chapter-1',
      title: '‡∏ö‡∏ó 1: ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
      characters: ['‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢', '‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏≤'],
      locations: ['‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á', '‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏≤'],
      keyEvents: ['‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏ö‡πÑ‡∏•‡πà', '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏≤'],
      summary: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏ö‡πÑ‡∏•‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏á',
      content: `‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏°‡πÄ‡∏°‡∏Ü‡∏î‡∏≥ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡∏ô‡∏±‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏¥‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠ ‡∏°‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠ ‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ

"‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á ‡∏ù‡πà‡∏≤‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏î‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏£‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á" ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏á‡∏£‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡∏±‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏±‡πà‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°

‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡∏£‡∏π‡πâ‡∏î‡∏µ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏ô‡∏≤‡∏ô ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏•‡∏•‡∏±‡∏á‡∏Å‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏ò‡∏≠‡πÑ‡∏õ‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏•`
    },
    {
      id: 'chapter-2',
      title: '‡∏ö‡∏ó 2: ‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏Å‡∏±‡∏ô',
      characters: ['‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢', '‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏´‡∏≠'],
      locations: ['‡∏õ‡πà‡∏≤‡∏•‡∏∂‡∏Å', '‡∏Å‡∏£‡∏∞‡∏ï‡πä‡∏≠‡∏ö‡πÉ‡∏ô‡∏õ‡πà‡∏≤'],
      keyEvents: ['‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏ö‡∏´‡∏ô‡∏µ', '‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏´‡∏≠'],
      summary: '‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏£‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏õ‡πà‡∏≤',
      content: `‡∏õ‡πà‡∏≤‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡∏¢‡∏≤‡∏°‡∏Ñ‡πà‡∏≥‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏ï‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏ú‡πà‡πÉ‡∏´‡∏ç‡πà`
    },
    {
      id: 'chapter-3',
      title: '‡∏ö‡∏ó 3: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      characters: ['‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢', '‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏´‡∏≠'],
      locations: ['‡∏Å‡∏£‡∏∞‡∏ï‡πä‡∏≠‡∏ö', '‡∏™‡∏ô‡∏≤‡∏°‡∏ù‡∏∂‡∏Å'],
      keyEvents: ['‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ', '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏Å'],
      summary: '‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ',
      content: `‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏´‡∏≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏ã‡∏∂‡πà‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô`
    },
    {
      id: 'chapter-4',
      title: '‡∏ö‡∏ó 4: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö',
      characters: ['‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢', '‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏´‡∏≠', '‡∏ú‡∏π‡πâ‡∏™‡∏∑‡∏ö‡πÄ‡∏£‡πâ‡∏ô'],
      locations: ['‡∏õ‡πà‡∏≤‡∏•‡∏∂‡∏Å', '‡∏ñ‡πâ‡∏≥‡∏•‡∏±‡∏ö'],
      keyEvents: ['‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö', '‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡πà‡∏≤'],
      summary: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏£‡∏∞‡∏Å‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢',
      content: ''
    },
    {
      id: 'chapter-5',
      title: '‡∏ö‡∏ó 5: ‡∏Å‡∏≤‡∏£‡∏™‡∏π‡πâ‡∏£‡∏ö',
      characters: ['‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢', '‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏´‡∏≠', '‡∏®‡∏±‡∏ï‡∏£‡∏π'],
      locations: ['‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö', '‡∏´‡∏∏‡∏ö‡πÄ‡∏Ç‡∏≤'],
      keyEvents: ['‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å', '‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏•‡∏∞'],
      summary: '‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
      content: ''
    }
  ];

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö
  chapterCardsData.forEach((chapterData, index) => {
    const card = createEditableChapterCard(chapterData, index);
    cardsContainer.appendChild(card);
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà
  const addCard = createAddChapterCard();
  cardsContainer.appendChild(addCard);

  console.log(`üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ö‡∏ó ${chapterCardsData.length} ‡πÉ‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
function createEditableChapterCard(data, index) {
  const card = document.createElement('div');
  card.className = 'chapter-info-card editable-card';
  card.dataset.chapterId = data.id;

  card.innerHTML = `
    <div class="card-header">
      <div class="chapter-number">${index + 1}</div>
      <button class="edit-toggle-btn" onclick="toggleCardEdit('${data.id}')">
        <i class="fas fa-edit"></i>
      </button>
    </div>

    <div class="card-content">
      <!-- Title Section -->
      <div class="editable-section">
        <div class="display-mode">
          <h4 class="card-title">${data.title}</h4>
        </div>
        <div class="edit-mode" style="display: none;">
          <input type="text" class="title-edit" value="${data.title}" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó">
        </div>
      </div>

      <!-- Characters Section -->
      <div class="metadata-section">
        <div class="metadata-label">
          <i class="fas fa-users"></i> ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        </div>
        <div class="editable-section">
          <div class="display-mode">
            <div class="tags-display characters-tags">
              ${data.characters.map(char => `<span class="metadata-tag">${char}</span>`).join('')}
            </div>
          </div>
          <div class="edit-mode" style="display: none;">
            <input type="text" class="characters-edit" value="${data.characters.join(', ')}" placeholder="‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)">
          </div>
        </div>
      </div>

      <!-- Locations Section -->
      <div class="metadata-section">
        <div class="metadata-label">
          <i class="fas fa-map-marker-alt"></i> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        </div>
        <div class="editable-section">
          <div class="display-mode">
            <div class="tags-display locations-tags">
              ${data.locations.map(loc => `<span class="metadata-tag location-tag">${loc}</span>`).join('')}
            </div>
          </div>
          <div class="edit-mode" style="display: none;">
            <input type="text" class="locations-edit" value="${data.locations.join(', ')}" placeholder="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)">
          </div>
        </div>
      </div>

      <!-- Key Events Section -->
      <div class="metadata-section">
        <div class="metadata-label">
          <i class="fas fa-star"></i> ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        </div>
        <div class="editable-section">
          <div class="display-mode">
            <div class="tags-display events-tags">
              ${data.keyEvents.map(event => `<span class="metadata-tag event-tag">${event}</span>`).join('')}
            </div>
          </div>
          <div class="edit-mode" style="display: none;">
            <input type="text" class="events-edit" value="${data.keyEvents.join(', ')}" placeholder="‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)">
          </div>
        </div>
      </div>
    </div>

    <div class="card-footer">
      <div class="quick-actions">
        <button class="action-btn jump-btn" onclick="jumpToChapter('${data.id}')" title="‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏ó‡∏ô‡∏µ‡πâ">
          <i class="fas fa-arrow-right"></i>
        </button>
        <button class="action-btn view-btn" onclick="previewChapter('${data.id}')" title="‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á">
          <i class="fas fa-eye"></i>
        </button>
      </div>

      <div class="edit-actions" style="display: none;">
        <button class="save-btn" onclick="saveCardEdits('${data.id}')">
          <i class="fas fa-check"></i> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        </button>
        <button class="cancel-btn" onclick="cancelCardEdits('${data.id}')">
          <i class="fas fa-times"></i> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </button>
      </div>
    </div>
  `;

  return card;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà
function createAddChapterCard() {
  const card = document.createElement('div');
  card.className = 'chapter-info-card add-chapter-card';
  card.innerHTML = `
    <div class="add-card-content" onclick="addNewChapter()">
      <i class="fas fa-plus"></i>
      <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà</span>
    </div>
  `;
  return card;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
function toggleCardEdit(chapterId) {
  const card = document.querySelector(`[data-chapter-id="${chapterId}"]`);
  if (!card) return;

  const isEditing = card.classList.contains('editing');

  if (isEditing) {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    saveCardEdits(chapterId);
  } else {
    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    enterEditMode(card);
  }
}

function enterEditMode(card) {
  card.classList.add('editing');

  // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏ã‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const displayModes = card.querySelectorAll('.display-mode');
  const editModes = card.querySelectorAll('.edit-mode');
  const quickActions = card.querySelector('.quick-actions');
  const editActions = card.querySelector('.edit-actions');

  displayModes.forEach(mode => mode.style.display = 'none');
  editModes.forEach(mode => mode.style.display = 'block');

  if (quickActions) quickActions.style.display = 'none';
  if (editActions) editActions.style.display = 'flex';

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const editBtn = card.querySelector('.edit-toggle-btn i');
  if (editBtn) {
    editBtn.className = 'fas fa-check';
  }
}

function saveCardEdits(chapterId) {
  const card = document.querySelector(`[data-chapter-id="${chapterId}"]`);
  if (!card) return;

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const titleEdit = card.querySelector('.title-edit');
  const charactersEdit = card.querySelector('.characters-edit');
  const locationsEdit = card.querySelector('.locations-edit');
  const eventsEdit = card.querySelector('.events-edit');

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const cardTitle = card.querySelector('.card-title');
  const charactersDisplay = card.querySelector('.characters-tags');
  const locationsDisplay = card.querySelector('.locations-tags');
  const eventsDisplay = card.querySelector('.events-tags');

  if (titleEdit && cardTitle) {
    cardTitle.textContent = titleEdit.value;
  }

  if (charactersEdit && charactersDisplay) {
    const characters = charactersEdit.value.split(',').map(s => s.trim()).filter(s => s);
    charactersDisplay.innerHTML = characters.map(char =>
      `<span class="metadata-tag">${char}</span>`
    ).join('');
  }

  if (locationsEdit && locationsDisplay) {
    const locations = locationsEdit.value.split(',').map(s => s.trim()).filter(s => s);
    locationsDisplay.innerHTML = locations.map(loc =>
      `<span class="metadata-tag location-tag">${loc}</span>`
    ).join('');
  }

  if (eventsEdit && eventsDisplay) {
    const events = eventsEdit.value.split(',').map(s => s.trim()).filter(s => s);
    eventsDisplay.innerHTML = events.map(event =>
      `<span class="metadata-tag event-tag">${event}</span>`
    ).join('');
  }

  // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  exitEditMode(card);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å
  syncCardToMainContent(chapterId);

  console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î ${chapterId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
}

function cancelCardEdits(chapterId) {
  const card = document.querySelector(`[data-chapter-id="${chapterId}"]`);
  if (!card) return;
  exitEditMode(card);
}

function exitEditMode(card) {
  card.classList.remove('editing');

  // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡∏ã‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const displayModes = card.querySelectorAll('.display-mode');
  const editModes = card.querySelectorAll('.edit-mode');
  const quickActions = card.querySelector('.quick-actions');
  const editActions = card.querySelector('.edit-actions');

  displayModes.forEach(mode => mode.style.display = 'block');
  editModes.forEach(mode => mode.style.display = 'none');

  if (quickActions) quickActions.style.display = 'flex';
  if (editActions) editActions.style.display = 'none';

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const editBtn = card.querySelector('.edit-toggle-btn i');
  if (editBtn) {
    editBtn.className = 'fas fa-edit';
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å
function syncCardToMainContent(chapterId) {
  // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å
  console.log(`üîÑ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î ${chapterId} ‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å`);
}

function jumpToChapter(chapterId) {
  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó
  switchModule('writing');
  loadChapterContent(chapterId);
  console.log(`üéØ ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏ó ${chapterId}`);
}

function previewChapter(chapterId) {
  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏≠‡∏•‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ö‡∏ó
  console.log(`üëÅÔ∏è ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ö‡∏ó ${chapterId}`);
}

function loadChapterContent(chapterId) {
  const writingEditor = document.getElementById('writingEditor');
  if (!writingEditor) return;

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firebase
  const chapterContent = {
    'chapter-1': '‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏°‡πÄ‡∏°‡∏Ü‡∏î‡∏≥ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡∏ô‡∏±‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏¥‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠...',
    'chapter-2': '‡∏õ‡πà‡∏≤‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡∏¢‡∏≤‡∏°‡∏Ñ‡πà‡∏≥‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡πÜ...',
    'chapter-3': '‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡πÄ‡∏´‡∏°‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏´‡∏≠...'
  };

  const content = chapterContent[chapterId] || '';
  writingEditor.value = content;
  writingEditor.focus();
}

function addNewChapter() {
  const newChapterId = `chapter-${Date.now()}`;
  const newChapterData = {
    id: newChapterId,
    title: '‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà',
    characters: [],
    locations: [],
    keyEvents: [],
    summary: '',
    content: ''
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà
  const cardsContainer = document.getElementById('chapterInfoCards');
  const addCard = cardsContainer.querySelector('.add-chapter-card');
  const newCard = createEditableChapterCard(newChapterData, cardsContainer.children.length);

  cardsContainer.insertBefore(newCard, addCard);

  // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  setTimeout(() => {
    enterEditMode(newCard);
    const titleInput = newCard.querySelector('.title-edit');
    if (titleInput) {
      titleInput.focus();
      titleInput.select();
    }
  }, 100);

  console.log(`‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà: ${newChapterId}`);
}

// Chapter Cards Trigger
  const chapterCardsTrigger = document.getElementById('chapterCardsTrigger');
  const chapterCardsOverlay = document.getElementById('chapterCardsOverlay');

  if (chapterCardsTrigger && chapterCardsOverlay) {
    chapterCardsTrigger.addEventListener('click', function() {
      chapterCardsOverlay.style.display = 'flex';
      toggleWritingAreaBorder(true); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
      generateChapterCards();
    });

    chapterCardsOverlay.addEventListener('click', function(e) {
      if (e.target === chapterCardsOverlay) {
        chapterCardsOverlay.style.display = 'none';
        toggleWritingAreaBorder(false); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
      }
    });
  }

// Export for debugging and module access
window.appState = appState;
window.saveToFirebase = saveToFirebase;
window.performSystemHealthCheck = performSystemHealthCheck;
window.showSaveStatus = showSaveStatus;

console.log('‚ú® ‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡∏´‡∏°‡∏∑‡πà‡∏ô‡∏≠‡∏±‡∏Å‡∏©‡∏£ - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
function addScrollButtons(container) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
  const leftBtn = document.createElement('button');
  leftBtn.className = 'scroll-btn scroll-left';
  leftBtn.innerHTML = '<i class="fas fa-chevron-left"></i>';
  leftBtn.style.cssText = `
    position: absolute;
    left: 5px;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(212, 175, 55, 0.9);
    border: none;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    color: white;
    cursor: pointer;
    z-index: 1001;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  `;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏ß‡∏≤
  const rightBtn = document.createElement('button');
  rightBtn.className = 'scroll-btn scroll-right';
  rightBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
  rightBtn.style.cssText = leftBtn.style.cssText.replace('left: 5px', 'right: 5px');

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå hover
  [leftBtn, rightBtn].forEach(btn => {
    btn.addEventListener('mouseenter', () => {
      btn.style.transform = btn.className.includes('left') ?
        'translateY(-50%) scale(1.1) translateX(-2px)' :
        'translateY(-50%) scale(1.1) translateX(2px)';
      btn.style.boxShadow = '0 6px 16px rgba(0, 0, 0, 0.3)';
    });

    btn.addEventListener('mouseleave', () => {
      btn.style.transform = 'translateY(-50%) scale(1)';
      btn.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.2)';
    });
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
  leftBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    container.scrollBy({ left: -180, behavior: 'smooth' });
  });

  rightBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    container.scrollBy({ left: 180, behavior: 'smooth' });
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ overlay
  const overlay = document.getElementById('chapterCardsOverlay');
  overlay.appendChild(leftBtn);
  overlay.appendChild(rightBtn);

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°
  function updateScrollButtons() {
    const scrollLeft = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;

    leftBtn.style.opacity = scrollLeft > 0 ? '1' : '0.5';
    rightBtn.style.opacity = scrollLeft < maxScroll ? '1' : '0.5';
  }

  container.addEventListener('scroll', updateScrollButtons);
  updateScrollButtons();
}
